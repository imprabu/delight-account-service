plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.6'
	id 'io.spring.dependency-management' version '1.1.7'
}
group = 'com.delight'
version = '0.0.1-SNAPSHOT'
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
        exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }
}
repositories {
	mavenCentral()
}
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.apache.kafka:kafka-streams'
	implementation 'org.liquibase:liquibase-core'
        implementation 'org.springframework.kafka:spring-kafka'
        implementation 'org.springframework.boot:spring-boot-starter-log4j2'
        implementation 'org.springframework.boot:spring-boot-starter-aop'
        implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
        runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.3'
        runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.3'
        compileOnly 'org.projectlombok:lombok'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
        // TiDB is MySQL compatible; use the MySQL driver to connect
        implementation 'com.mysql:mysql-connector-j:8.4.0'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation 'com.h2database:h2'
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}
tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}
tasks.named('test') {
        useJUnitPlatform()
}

def selectedEnv = System.getenv('ENV') ?: 'staging'
def envFile = file("envVariables_${selectedEnv}")
def bootRunEnv = [:]
if (envFile.exists()) {
    def currentEnv = System.getenv()
    envFile.eachLine { line ->
        def trimmed = line.trim()
        if (!trimmed || trimmed.startsWith('#')) {
            return
        }
        def parts = trimmed.split('=', 2)
        if (parts.length == 2 && !currentEnv.containsKey(parts[0])) {
            bootRunEnv[parts[0]] = parts[1]
        }
    }
}

tasks.named('bootRun') {
    environment bootRunEnv
}
